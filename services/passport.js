const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('User')



//Serialize user - passport - convertes user model into id (internal id generated by monogo db)
passport.serializeUser((user, done)=>{
    done(null, user.id)
})

//Desrialize user converts back id into user model
passport.deserializeUser((id, done)=> {
    User.findById(id)
    .then(user => {
        done(null, user);
    })
})



//Passport Configuration For Google O auth
passport.use(new GoogleStrategy({
    clientID : keys.googleClientID,
    clientSecret : keys.googleClientSecret,
    callbackURL: '/auth/google/callback',
    proxy: true,

}, async(accessToken,refreshToken,profile, done)=> {

     //check user table for anyone with a Google ID of profile.id
    const exisitingUser = await User.findOne({ googleId : profile.id });

    if(exisitingUser){
        return done(null,exisitingUser);
    }

    const user = await new User({ googleId : profile.id}).save()
    done(null, user)

    //Old promise based code
    // User.findOne({ googleId : profile.id })
    // .then((exisitingUser) => {
    //     if(exisitingUser) {
    //         //We already have the profile
    //         done(null, exisitingUser)
    //     } else {
    //         // Profile not found so save it
    //         new User({ googleId : profile.id}).save().then(user => done(null, user))
    //     }
    // })

 
    // console.log('accessToken:', accessToken);
    // console.log('refreshToken', refreshToken);
    // console.log('profile', profile);
    
    }
));

//Passport Configuration For FaceBook O auth
passport.use(new FacebookStrategy({
    clientID: keys.facebookAppID,
    clientSecret: keys.facebookAppSecret,
    callbackURL:'/auth/google/callback',
    proxy : true,
  },

  async(accessToken,refreshToken,profile, cb)=> {
     //check user table for anyone with a facebook ID of profile.id
    const exisitingUser = await User.findOne({ facebookId : profile.id });

    if(exisitingUser){
        return done(null,exisitingUser);
    }
    //No user was found... so create a new user with values from Facebook (all the profile. stuff)
    const user = await new User({ facebookId : profile.id}).save()
    done(null, user)

   }
));

